import { Button, Flex, FormControl, FormLabel, Input, Select } from '@chakra-ui/react';
import { PrismaClient, Status, Tag } from '@prisma/client';
import axios from 'axios';
import { GetServerSideProps, NextPage } from 'next';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { ParsedUrlQuery } from 'querystring';
import { useForm } from 'react-hook-form';
import { AppBar } from '../../components/AppBar';

interface IParamsProps extends ParsedUrlQuery {
    id: string;
}

interface IEditPageProps {
    card: IEditCardData
}

interface IEditCardData {
    id: number;
    name: string;
    day: string;
    tag: Tag;
    resume: string;
    status: Status;
}

const zeroPad = (num: number, places: number) => String(num).padStart(places, '0');

const EditPage: NextPage<IEditPageProps> = (props) => {

    const router = useRouter();

    const {card} = props;

    console.log('Before:', card);

    const date = new Date(card.day);

    // const dateString = date.getFullYear() + '-' + zeroPad((date.getMonth() + 1), 2) + '-' + zeroPad((date.getDate() + 1), 2);

    const dateString = date.toISOString().split('T')[0];

    const defaultValues = {...card, day: dateString};

    console.log('After:', defaultValues);

    const {register, handleSubmit, formState: {
        isSubmitting
    }} = useForm<IEditCardData>({
        defaultValues
    });

    async function onSubmit(data: IEditCardData) {
        data.day = (new Date(data.day)).toISOString();

        const response = await axios.patch('/api/card', {...data});

        router.push('/');
    }

    return (
        <>
            <Head>
                <title>Avante-Garde</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <AppBar></AppBar>
            <Flex w={'100vw'} h={'calc(100vh - 70px)'} flexDir={'column'} bgColor={'gray.600'} justify={'center'} align={'center'}>
                <Flex
                    w={'60%'}
                    h={'80%'}
                    flexDir={'column'}
                    justifyContent={'space-around'}
                    align={'stretch'}
                    bgColor={'gray.800'}
                    borderRadius={'lg'}
                    as={'form'}
                    color={'gray.100'}
                    p={'20'}
                    onSubmit={handleSubmit(onSubmit)}
                >
                    <FormControl>
                        <FormLabel>
                            Name
                        </FormLabel>
                        <Input
                            id='name'
                            {...register('name')}
                        />
                    </FormControl>
                    <FormControl>
                        <FormLabel>
                            Resume
                        </FormLabel>
                        <Input
                            id='resume'
                            {...register('resume')}
                        />
                    </FormControl>
                    <FormControl>
                        <FormLabel>
                            Tag
                        </FormLabel>
                        <Select
                            id={'tag'}
                            {...register('tag')}
                        >
                            {Object.keys(Tag).map(tag => {
                                return <option
                                    key={tag}
                                    value={tag}
                                    style={{color: 'black'}}
                                >{tag}</option>;
                            })}
                        </Select>
                    </FormControl>
                    <FormControl>
                        <FormLabel>
                            Status
                        </FormLabel>
                        <Select
                            id={'status'}
                            {...register('status')}
                        >
                            {Object.keys(Status).map(status => {
                                return <option
                                    key={status}
                                    value={status}
                                    style={{color: 'black'}}
                                >{status}</option>;
                            })}
                        </Select>
                    </FormControl>
                    <FormControl>
                        <FormLabel color="white">
                            Date
                        </FormLabel>
                        <Input
                            type={'date'}
                            color={'white'}
                            {...register('day')}
                        />
                    </FormControl>
                    <Flex align={'center'} justifyContent={'space-between'} px={'30'}>
                        <Button mt={4} colorScheme={'green'} isLoading={isSubmitting} type='submit' width={'30%'}>
                            Update
                        </Button>
                        <Button width={'30%'} mt={4} colorScheme={'blue'} onClick={
                            () => router.push('/')
                        }>
                            Cancel
                        </Button>
                        <Button mt={4} colorScheme={'red'} isLoading={isSubmitting} width={'30%'}
                            onClick={async () => {
                                await axios.delete('/api/card', {data: {
                                    id: card.id
                                }});

                                router.push('/');
                            }}
                        >
                            Delete
                        </Button>
                    </Flex>
                </Flex>
            </Flex>
        </>
    );
};

export const getServerSideProps: GetServerSideProps = async (context) => {

    const {id} = context.params as IParamsProps;

    const prisma = new PrismaClient();

    const card = await prisma.card.findFirst({
        where: {
            id: Number(id)
        },
        select: {
            name: true,
            id: true,
            status: true,
            day: true,
            tag: true,
            resume: true
        }
    });

    if(!card) return {
        redirect: {
            permanent: false,
            destination: '/'
        }
    };


    const returnCard: IEditCardData = {...card, day: card.day.toISOString()};

    return {
        props: {
            card: returnCard
        }
    };
};

export default EditPage;